package com.example.test;

import org.junit.*;
import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.io.File;
import org.apache.commons.io.FileUtils;
import org.openqa.selenium.OutputType;

public class MainPage {

    private static WebDriver driver ;
    JavascriptExecutor jsDriver = (JavascriptExecutor) driver;
    private static String JOIN_OUR_CREW ="JOIN OUR CREW";
    private static  String PAGE_TITLE ="Numadic Iot Pvt. Ltd. - QA Engineer in";
    private static  String ERROR_MESSAGE = "Resume cannot be empty.";

    @BeforeClass
    public static void init()
    {System.setProperty("webdriver.chrome.driver","C:/driver/chromedriver_win32 (2)/chromedriver.exe");
        driver = new ChromeDriver();
        String url = "https://jobs.numadic.com/jobs/Careers";

        driver.navigate().to(url);
        ChromeOptions options = new ChromeOptions();
        options.addArguments("--start-maximized");
    }

    @org.junit.Test
    public void TestMethod() throws Exception {
        WebElement joinOurCrewLabel = driver.findElement(By.xpath("//*[@id=\"53264000000201153\"]//h2[contains(text(),'JOIN OUR CREW')]"));
        waitUntilVisibility(joinOurCrewLabel);
        captureScreenshot(driver,"wer");
        //Verify header text
        Assert.assertEquals(JOIN_OUR_CREW, joinOurCrewLabel.getText());
        captureScreenshot(driver,"wer");
        WebElement filterByLabel = driver.findElement(By.xpath("//*[@id=\"website_block_jobs\"]//label[contains(text(),'Filter by')]"));
        //scroll for the visibility of Filter By dropdown
        jsDriver.executeScript("arguments[0].scrollIntoView",filterByLabel);
        WebElement dropdown = driver.findElement(By.xpath("//*[@id=\"website_block_jobs\"]//lyte-icon[@class='dropdown']"));
        waitUntilVisibility(dropdown);
        //click on dropdown icon for the visibility of options
        dropdown.click();
        captureScreenshot(driver,"wer");
        WebElement engineeringOption = driver.findElement(By.xpath("//*[@id='Lyte_Drop_Item_4' and contains(text(),'Engineering')]"));
        //scroll for the visibility of Engineering Option
        jsDriver.executeScript("arguments[0].scrollIntoView",engineeringOption);
        waitUntilVisibility(engineeringOption);
        //click on Engineering option
        engineeringOption.click();
        WebElement qa = driver.findElement(By.xpath("//*[@id=\"cw-group-Engineering\"]//a[contains(text(),'QA Engineer')]"));
        waitUntilVisibility(qa);
        //select QA Engineer option
        qa.click();
        Assert.assertEquals(PAGE_TITLE,driver.getTitle());
        captureScreenshot(driver,"wer");
        WebElement btn = driver.findElement(By.cssSelector("#detail-page-applybtn > button > lyte-yield"));
        waitUntilVisibility(btn);
        Assert.assertTrue(btn.isDisplayed());
        btn.click();
        WebElement titleQA = driver.findElement(By.xpath("//*[@id=\"career-website-main\"]//h1[contains(text(),'QA Engineer')]"));

        jsDriver.executeScript("window.scrollTo(0,document.body.scrollHeight)");
        WebElement submitApplicationBtn = driver.findElement(By.xpath("//*[@id=\"cw-submit-btn\"]/button/lyte-yield[contains(text(),'Submit Application')]"));
        waitUntilVisibility(submitApplicationBtn);
        //Verify if Submit Application button submits the application without any input
        submitApplicationBtn.click();
        WebElement errorMessage = driver.findElement(By.xpath("//*[@id=\"rec-form_53264000000017197\"]//lyte-yield/span[@class='cruxErrMsg cruxErrorMsgDesc']"));
        Assert.assertTrue(errorMessage.isDisplayed());
        Assert.assertEquals(ERROR_MESSAGE, errorMessage.getText());

        WebElement firstName = driver.findElement(By.xpath("//*[@id=\"rec-form_53264000000003149\"]/div/lyte-input/div/input"));
        WebElement lastName = driver.findElement(By.xpath("//*[@id=\"rec-form_53264000000003151\"]/div/lyte-input/div/input"));
        firstName.sendKeys(Keys.chord("1234"));
        lastName.sendKeys(Keys.chord("1234"));
        WebElement firstNameError = driver.findElement(By.xpath("//*[@id=\"rec-form_53264000000003149\"]/div/crux-error-message/span"));
        WebElement lastNameError = driver.findElement(By.xpath("//*[@id=\"rec-form_53264000000003151\"]/div/crux-error-message/span"));
        //Verify numerical values in names fields and error not displayed
        Assert.assertFalse(firstNameError.isDisplayed());
        Assert.assertFalse(lastNameError.isDisplayed());
        WebElement email = driver.findElement(By.xpath("//*[@id=\"rec-form_53264000000003155\"]/div/lyte-input/div/input"));
        email.sendKeys(Keys.chord("1234"));
        WebElement emailError = driver.findElement(By.xpath("//crux-error-message[@error-message=\"Last Name cannot be empty.\"]"));
        //Verify invalid details in email field
        Assert.assertTrue(emailError.isDisplayed());
        WebElement mobile = driver.findElement(By.xpath("//*[@id=\"rec-form_53264000000003161\"]/div/div/lyte-input/div/input"));
        WebElement mobileError = driver.findElement(By.xpath("//*[@id=\"rec-form_53264000000003161\"]/div/crux-error-message/span"));
        mobile.sendKeys("xbbxh");
        //Verify alphabets allowed in mobile number fields and error not displayed
        Assert.assertFalse(mobileError.isDisplayed());
        WebElement currentCTC =driver.findElement(By.xpath("//*[@id=\"rec-form_53264000000003181\"]/div/div/lyte-input/div/input"));
        currentCTC.sendKeys("xbbxh");
        WebElement  currentJobTitleIcon =driver.findElement(By.xpath("//*[@id=\"rec-form_53264000000003183\"]/div/lyte-dropdown/div[1]/lyte-drop-button/lyte-icon"));
        currentJobTitleIcon.click();
        Select select= new Select (currentJobTitleIcon);
        select.selectByVisibleText("Fresher");

    }

    private void  waitUntilVisibility(WebElement element){
        WebDriverWait webDriverWait = new WebDriverWait(driver, 3,50);
        webDriverWait.until((ExpectedConditions.visibilityOf(element)));
    }


    public static void captureScreenshot(WebDriver driver,  String fileName) {
        try {
            TakesScreenshot ts = (TakesScreenshot) driver;
             String folderLocation = "C:\\xyz";
            File source = ts.getScreenshotAs(OutputType.FILE);
            File dest = new File(folderLocation + "/" + fileName);
            FileUtils.copyFile(source, dest);

        } catch (Exception e) {
            System.out.println("Exception while taking screenshot " + e.getMessage());
        }
    }

}
